defmodule NoizuTeamsWeb.Project.TeamMembers do
  use NoizuTeamsWeb, :live_view
  #import Phoenix.LiveView.JS
  #import NoizuTeamsWeb.Nav.Tags
  import NoizuTeamsWeb.Project.Tags
  import NoizuLabs.EntityReference.Helpers
  #alias Phoenix.PubSub
  require Logger
  require NoizuTeamsWeb.LiveMessage

#  defp error_title(_error), do: "Team Member"
#  defp error_body(_error) do
#    "An error has Occurred"
#  end

  def render(assigns) do
    ~H"""
    <div
    class="

    "

    >
      <.team_member :for={member <- @team_members} member={member} />
    </div>
    """
  end



  def agent_edit_modal(modal_key, _socket, agent) do
    agent_session = %{
      "agent_id" =>  ERP.ref(agent) |> ok?
    }
    payload = %NoizuTeamsWeb.Nav.Modal.Definition{
      mask: :required,
      enabled: true,
      identifier: modal_key,
      title: "Edit Agent: #{agent.name}",
      widget: {NoizuTeamsWeb.AgentLive, modal_key, agent_session},
      theme: nil,
      size: :lg,
      position: %{top: "top-[10%]", left: "left-[20%]" }, # would be nice if we could grab out position
    }
    NoizuTeamsWeb.LiveMessage.publish(
      NoizuTeamsWeb.LiveMessage.live_pub(subject: :modal, instance: agent.slug, event: :launch, payload: payload)
    )
  end


  def handle_event("spawn:edit:agent:modal:" <> slug, _, socket) do
    pool = socket.assigns[:team_members]
    with %NoizuTeams.Project.Agent{} = agent <- Enum.find(pool, &(&1.identifier == slug)) do
      agent_edit_modal("edit-#{agent.slug}", socket, agent)
    end

    {:noreply, socket}
  end



  def handle_info(
        NoizuTeamsWeb.LiveMessage.live_pub(
          subject: :team,
          instance: :active,
          event: :change,
          payload: payload
        ),
        socket) do

    team = ERP.entity(payload.team, nil) |> ok?()
    members = NoizuTeams.Team.members(team) |> ok?()
    socket = socket
             |> assign(team_name: team.name)
             |> assign(team: ERP.ref(team) |> ok?())
             |> assign(team_members: members)

    socket = socket
             |> assign(team: payload.team)
    {:noreply, socket}
  end


  def mount(_, session, socket) do
    Logger.error("MOUNT#{__MODULE__} , #{inspect socket}, #{inspect session}}")
    NoizuTeamsWeb.LiveMessage.subscribe(
      NoizuTeamsWeb.LiveMessage.live_pub(subject: :team, instance: :active, event: :change)
    )

    team = ERP.entity(session["team"], nil) |> ok?()
    members = NoizuTeams.Team.members(team) |> ok?()
    socket = socket
             |> assign(project: ERP.ref(session["project"]) |> ok?())
             |> assign(team_name: team.name)
             |> assign(team: ERP.ref(team) |> ok?())
             |> assign(team_members: members)
    {:ok, socket}
  end
end